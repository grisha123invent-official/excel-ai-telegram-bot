import os
import logging
import tempfile
import io
import asyncio
import subprocess
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# ID –ø–∞–ø–∫–∏ Google Drive
FOLDER_ID = '1uMBbz1UOkb9XJEImYOdfbiDpREeuVG-q'

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
temp_dir = tempfile.mkdtemp()
logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ñ–∞–π–ª–æ–≤: {temp_dir}")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ Drive API
drive_service = None
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
STATE_IDLE = 'idle'
STATE_WAITING_QUERY = 'waiting_query'
STATE_CHAT_MODE = 'chat_mode'  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏, –≤—ã–∑–≤–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏."""
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {update}: {context.error}")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø—Ä–æ–±–ª–µ–º–µ
    if update and update.effective_chat:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
def create_drive_service():
    """–°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å Google Drive API —Å —Å–µ—Ä–≤–∏—Å–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º."""
    global drive_service

    try:
        service_account_json = os.getenv('SERVICE_ACCOUNT')
        service_account_info = json.loads(service_account_json)

        # –°–æ–∑–¥–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—è from_service_account_info –≤–º–µ—Å—Ç–æ from_service_account_file
        credentials = service_account.Credentials.from_service_account_info(
            service_account_info, scopes=['https://www.googleapis.com/auth/drive.readonly'])

        # –°—Ç—Ä–æ–∏–º —Å–µ—Ä–≤–∏—Å
        drive_service = build('drive', 'v3', credentials=credentials)
        logger.info("Drive API —Å–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ Drive API: {e}")
        return False


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å Google Drive API –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å—Ç–∞—Ä—Ç–µ
    if drive_service is None:
        success = create_drive_service()
        if not success:
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Drive. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = STATE_IDLE
    if user_id in user_data:
        user_data[user_id] = {}

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    await update.message.reply_text("–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ Google Drive –∏ –ø–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤...")
    await list_excel_files(update, context)


async def list_excel_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ Excel-—Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏."""
    user_id = update.effective_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ Excel-—Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
        results = drive_service.files().list(
            q=f"'{FOLDER_ID}' in parents and trashed = false and (mimeType='application/vnd.ms-excel' or mimeType='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')",
            pageSize=10,
            fields="files(id, name, mimeType)"
        ).execute()

        items = results.get('files', [])

        if not items:
            await update.message.reply_text(
                "–í –ø–∞–ø–∫–µ –Ω–µ—Ç Excel-—Ñ–∞–π–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É Google Drive."
            )
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ñ–∞–π–ª–æ–≤
            keyboard = []
            for item in items:
                keyboard.append([
                    InlineKeyboardButton(f"üìä {item['name']}", callback_data=f"excel_{item['id']}")
                ])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
            keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="refresh_files")])

            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ Excel-—Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ Excel-—Ñ–∞–π–ª–æ–≤: {e}")
        await update.message.reply_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}"
        )


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –≤—Å–µ –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    user_id = update.effective_user.id

    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {query.data}")

    await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback

    if query.data == "refresh_files":
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        await refresh_files(update, context)
    elif query.data.startswith("excel_"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª Excel-—Ñ–∞–π–ª
        # –§–æ—Ä–º–∞—Ç: excel_[file_id]
        parts = query.data.split("_", 1)
        if len(parts) == 2:
            file_id = parts[1]  # –ë–µ—Ä–µ–º –≤—Å–µ, —á—Ç–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ "_"

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–Ω–∞–ª, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞
            await query.edit_message_text("–ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ...")

            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –ø–æ ID
            try:
                file = drive_service.files().get(fileId=file_id, fields='name').execute()
                file_name = file['name']

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞
                if file_name.endswith('.xlsx') or file_name.endswith('.xls'):
                    await query.edit_message_text(
                        f"–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {file_name}\n–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ...")

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏–π
                await excel_file_selected(update, context, file_id, file_name)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: {e}")
                await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: {e}")
    elif query.data == "action_question":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
        user_states[user_id] = STATE_WAITING_QUERY
        user_data[user_id]['action_type'] = 'question'
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {user_data[user_id]['file_name']}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∫ –¥–∞–Ω–Ω—ã–º:"
        )
    elif query.data == "action_table":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–°–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É"
        user_states[user_id] = STATE_WAITING_QUERY
        user_data[user_id]['action_type'] = 'table'
        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {user_data[user_id]['file_name']}\n\n"
            "–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫—É—é —Ç–∞–±–ª–∏—Ü—É –Ω—É–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å:"
        )
    elif query.data == "back_to_files":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ñ–∞–π–ª–æ–≤
        user_states[user_id] = STATE_IDLE
        if user_id in user_data:
            user_data[user_id] = {}
        await refresh_files(update, context)
    elif query.data == "new_query":
        # –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–æ–≥–æ –∂–µ —Ñ–∞–π–ª–∞
        action_type = user_data[user_id]['action_type']
        user_states[user_id] = STATE_WAITING_QUERY
        await query.edit_message_text(
            f"–§–∞–π–ª: {user_data[user_id]['file_name']}\n\n"
            f"{'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∫ –¥–∞–Ω–Ω—ã–º:' if action_type == 'question' else '–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫—É—é —Ç–∞–±–ª–∏—Ü—É –Ω—É–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å:'}"
        )
    elif query.data == "main_menu":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user_states[user_id] = STATE_IDLE
        if user_id in user_data:
            user_data[user_id] = {}
        await refresh_files(update, context)
    elif query.data == "end_chat":
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–∂–∏–º —á–∞—Ç–∞
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        if 'chat_history' in user_data[user_id]:
            del user_data[user_id]['chat_history']

        user_states[user_id] = STATE_IDLE

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", callback_data="new_query")],
            [InlineKeyboardButton("üìÅ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª", callback_data="main_menu")]
        ]

        await query.edit_message_text(
            "–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif query.data == "generate_report":
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Ç–∞
        await generate_report_from_chat(update, context)


async def refresh_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤."""
    query = update.callback_query

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ Excel-—Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
        results = drive_service.files().list(
            q=f"'{FOLDER_ID}' in parents and trashed = false and (mimeType='application/vnd.ms-excel' or mimeType='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')",
            pageSize=10,
            fields="files(id, name, mimeType)"
        ).execute()

        items = results.get('files', [])

        if not items:
            await query.edit_message_text(
                "–í –ø–∞–ø–∫–µ –Ω–µ—Ç Excel-—Ñ–∞–π–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É Google Drive."
            )
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ñ–∞–π–ª–æ–≤
            keyboard = []
            for item in items:
                keyboard.append([
                    InlineKeyboardButton(f"üìä {item['name']}", callback_data=f"excel_{item['id']}")
                ])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å –º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            from datetime import datetime
            current_time = datetime.now().strftime("%H:%M:%S")
            keyboard.append(
                [InlineKeyboardButton(f"üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ ({current_time})", callback_data="refresh_files")])

            # –î–æ–±–∞–≤–ª—è–µ–º —á—Ç–æ-—Ç–æ –∫ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
            message_text = f"–í—ã–±–µ—Ä–∏—Ç–µ Excel-—Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ {current_time}):"

            try:
                await query.edit_message_text(
                    message_text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await query.message.reply_text(
                    message_text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
        try:
            await query.edit_message_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}"
            )
        except:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await query.message.reply_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}"
            )


async def excel_file_selected(update: Update, context: ContextTypes.DEFAULT_TYPE, file_id: str, file_name: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ Excel-—Ñ–∞–π–ª–∞."""
    query = update.callback_query
    user_id = update.effective_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    if user_id not in user_data:
        user_data[user_id] = {}

    user_data[user_id]['file_id'] = file_id
    user_data[user_id]['file_name'] = file_name

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = [
        [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="action_question")],
        [InlineKeyboardButton("üìä –°–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="action_table")],
        [InlineKeyboardButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª", callback_data="back_to_files")]
    ]

    await query.edit_message_text(
        f"–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {file_name}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    user_query = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if user_id not in user_states:
        return

    current_state = user_states[user_id]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∫–∞–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if current_state == STATE_WAITING_QUERY:
        # –ù–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∞–π–ª–µ
        if user_id not in user_data or 'file_id' not in user_data[user_id]:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
            return

        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_query}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        user_data[user_id]['query'] = user_query

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_message = await update.message.reply_text(
            "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...\n"
            "–°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª –∏–∑ Google Drive..."
        )

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_id = user_data[user_id]['file_id']
        file_name = user_data[user_id]['file_name']
        action_type = user_data[user_id]['action_type']

        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            downloaded_file_path = await download_file(file_id, file_name)

            if not downloaded_file_path:
                await processing_message.edit_text(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
            await processing_message.edit_text(
                f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å: '{user_query}'"
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            user_data[user_id]['file_path'] = downloaded_file_path

            if action_type == 'question':
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∂–∏–º —á–∞—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
                await start_chat_mode(update, context, processing_message, user_query, downloaded_file_path)
            else:
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç table_file_answer.py
                result = await run_script('table_file_answer.py', downloaded_file_path, user_query)

                # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —Ñ–∞–π–ª
                if os.path.exists('final.xlsx'):
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await processing_message.edit_text(
                        f"–¢–∞–±–ª–∏—Ü–∞ –≥–æ—Ç–æ–≤–∞! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª..."
                    )

                    with open('final.xlsx', 'rb') as file:
                        await update.message.reply_document(
                            document=file,
                            filename='result.xlsx',
                            caption="–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
                        )

                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    os.remove('final.xlsx')
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    await processing_message.edit_text(
                        f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:\n\n{result}"
                    )

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", callback_data="new_query")],
                    [InlineKeyboardButton("üìÅ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª", callback_data="main_menu")]
                ]

                await update.message.reply_text(
                    "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            await processing_message.edit_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}"
            )

    elif current_state == STATE_CHAT_MODE:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞
        await process_chat_query(update, context, user_query)


async def start_chat_mode(update: Update, context: ContextTypes.DEFAULT_TYPE, message_obj, user_query, file_path):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–∂–∏–º —á–∞—Ç–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å."""
    user_id = update.effective_user.id

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —á–∞—Ç–∞
    user_states[user_id] = STATE_CHAT_MODE

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if 'chat_history' not in user_data[user_id]:
        user_data[user_id]['chat_history'] = []

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    system_prompt = f"–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π Excel-—Ñ–∞–π–ª '{user_data[user_id]['file_name']}'. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –¥–∞–Ω–Ω—ã—Ö –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ. –ë—É–¥—å —Ç–æ—á–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º."

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    user_data[user_id]['chat_history'].append({"role": "system", "content": system_prompt})
    user_data[user_id]['chat_history'].append({"role": "user", "content": user_query})

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç answer.py —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as chat_file:
        json.dump(user_data[user_id]['chat_history'], chat_file)
        chat_history_path = chat_file.name

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
    result = await run_script('answer.py', file_path, user_query, chat_history=chat_history_path)

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–∞
    if os.path.exists(chat_history_path):
        os.remove(chat_history_path)

    # –ò—â–µ–º —Ä–∞–∑–¥–µ–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if "=== –†–ï–ó–£–õ–¨–¢–ê–¢ –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===" in result:
        parts = result.split("=== –†–ï–ó–£–õ–¨–¢–ê–¢ –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===")
        if len(parts) > 1:
            result = parts[1].strip()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    user_data[user_id]['chat_history'].append({"role": "assistant", "content": result})

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = [
        [InlineKeyboardButton("üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç", callback_data="generate_report")],
        [InlineKeyboardButton("üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data="end_chat")]
    ]

    await message_obj.edit_text(
        f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{result}\n\n–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def process_chat_query(update: Update, context: ContextTypes.DEFAULT_TYPE, user_query):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞."""
    user_id = update.effective_user.id
    file_path = user_data[user_id]['file_path']

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_message = await update.message.reply_text(
        f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å: '{user_query}'"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    user_data[user_id]['chat_history'].append({"role": "user", "content": user_query})

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as chat_file:
        json.dump(user_data[user_id]['chat_history'], chat_file)
        chat_history_path = chat_file.name

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    result = await run_script('answer.py', file_path, user_query, chat_history=chat_history_path)

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏–µ–π —á–∞—Ç–∞
    if os.path.exists(chat_history_path):
        os.remove(chat_history_path)

    # –ò—â–µ–º —Ä–∞–∑–¥–µ–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if "=== –†–ï–ó–£–õ–¨–¢–ê–¢ –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===" in result:
        parts = result.split("=== –†–ï–ó–£–õ–¨–¢–ê–¢ –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===")
        if len(parts) > 1:
            result = parts[1].strip()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    user_data[user_id]['chat_history'].append({"role": "assistant", "content": result})

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = [
        [InlineKeyboardButton("üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç", callback_data="generate_report")],
        [InlineKeyboardButton("üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data="end_chat")]
    ]

    await processing_message.edit_text(
        f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{result}\n\n–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def generate_report_from_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞."""
    query = update.callback_query
    user_id = update.effective_user.id

    await query.edit_message_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    if 'chat_history' not in user_data[user_id] or len(user_data[user_id]['chat_history']) < 3:
        await query.edit_message_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞. –ó–∞–¥–∞–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return

    file_path = user_data[user_id]['file_path']

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
    chat_summary = "\n".join([
        f"{msg['role'].upper()}: {msg['content']}"
        for msg in user_data[user_id]['chat_history']
        if msg['role'] != 'system'
    ])

    report_prompt = f"–ù–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç:"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏ –ø—Ä–æ–º–ø—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as chat_file:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
        report_history = user_data[user_id]['chat_history'].copy()
        report_history.append({"role": "user", "content": report_prompt})
        json.dump(report_history, chat_file)
        chat_history_path = chat_file.name

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
    result = await run_script('answer.py', file_path, report_prompt, chat_history=chat_history_path)

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    if os.path.exists(chat_history_path):
        os.remove(chat_history_path)

    # –ò—â–µ–º —Ä–∞–∑–¥–µ–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    if "=== –†–ï–ó–£–õ–¨–¢–ê–¢ –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===" in result:
        parts = result.split("=== –†–ï–ó–£–õ–¨–¢–ê–¢ –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===")
        if len(parts) > 1:
            result = parts[1].strip()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await query.edit_message_text(f"–û—Ç—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞:\n\n{result}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = [
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á–∞—Ç", callback_data="new_query")],
        [InlineKeyboardButton("üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data="end_chat")]
    ]

    await context.bot.send_message(
        chat_id=user_id,
        text="–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def download_file(file_id, file_name):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ Google Drive."""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        request = drive_service.files().get_media(fileId=file_id)

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
        file_path = os.path.join(temp_dir, file_name)

        with io.FileIO(file_path, 'wb') as fh:
            downloader = MediaIoBaseDownload(fh, request)
            done = False

            # –°–∫–∞—á–∏–≤–∞–µ–º —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            while not done:
                status, done = downloader.next_chunk()
                progress = int(status.progress() * 100)
                logger.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {progress}%")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∫–∞–∂–¥—ã–µ 10%

        logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω: {file_path}")
        return file_path

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None


async def run_script(script_name, file_path, query, **kwargs):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Python-—Å–∫—Ä–∏–ø—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
        if script_name == 'answer.py':
            # –î–ª—è —Å–∫—Ä–∏–ø—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
            cmd = ["python", script_name, file_path, query]

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'chat_history' in kwargs and os.path.exists(kwargs['chat_history']):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ —Å–∫—Ä–∏–ø—Ç chat-history
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                check_process = await asyncio.create_subprocess_exec(
                    "python", script_name, "--help",
                    stdout=asyncio.subprocess.PIPE,
                    stderr=asyncio.subprocess.PIPE
                )
                check_stdout, check_stderr = await check_process.communicate()
                help_output = check_stdout.decode() + check_stderr.decode()

                # –ï—Å–ª–∏ –≤ –≤—ã–≤–æ–¥–µ help –µ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ chat-history, –∑–Ω–∞—á–∏—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç—Ç–æ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç
                if "--chat-history" in help_output:
                    cmd.extend(["--chat-history", kwargs['chat_history']])
                    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞: {kwargs['chat_history']}")
                else:
                    logger.warning("–°–∫—Ä–∏–ø—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä --chat-history. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞.")

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
            cmd.append("--cache")

        else:
            # –î–ª—è —Å–∫—Ä–∏–ø—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
            output_file = 'final.xlsx'
            cmd = ["python", script_name, file_path, query, "--output", output_file]

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç: {' '.join(cmd)}")

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –≤—ã–≤–æ–¥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        process = await asyncio.create_subprocess_exec(
            *cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        async def read_stream(stream):
            output = []
            while True:
                line = await stream.readline()
                if not line:
                    break
                decoded_line = line.decode('utf-8').rstrip()
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –¥—Ä—É–≥—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                if not (decoded_line.startswith("–í—Ä–µ–º–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö") or
                        "–í—Å–µ –ª–∏—Å—Ç—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã" in decoded_line or
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫" in decoded_line or
                        "–ü–æ–ª—É—á–µ–Ω–æ —Å—Ç—Ä–æ–∫" in decoded_line):
                    logger.info(f"–í—ã–≤–æ–¥ —Å–∫—Ä–∏–ø—Ç–∞: {decoded_line}")
                    output.append(decoded_line)
            return output

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ stdout –∏ stderr
        stdout_lines, stderr_lines = await asyncio.gather(
            read_stream(process.stdout),
            read_stream(process.stderr)
        )

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        await process.wait()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if process.returncode != 0:
            error_msg = "\n".join(stderr_lines)
            logger.error(f"–°–∫—Ä–∏–ø—Ç –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {error_msg}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞: {error_msg}"

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = "\n".join(stdout_lines)

        # –ò—â–µ–º —Ä–∞–∑–¥–µ–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if "=== –†–ï–ó–£–õ–¨–¢–ê–¢ –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===" in result:
            parts = result.split("=== –†–ï–ó–£–õ–¨–¢–ê–¢ –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===")
            if len(parts) > 1:
                result = parts[1].strip()

        return result

    except asyncio.TimeoutError:
        logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞ {script_name}")
        return f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –§–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º –∏–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–º."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞ {script_name}: {e}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞: {e}"

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é."""
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = STATE_IDLE
    if user_id in user_data:
        user_data[user_id] = {}

    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
    )


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å Google Drive API
        success = create_drive_service()
        if not success:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–∏—Å Drive API. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —è–≤–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        application = Application.builder().token('7820736396:AAFGm7Xy3o3kI-HqC7EXzudXHF-pHyCltDA').build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("cancel", cancel))
        application.add_handler(CallbackQueryHandler(button_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_input))

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
        logger.info("–ó–∞–ø—É—Å–∫ polling —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏")
        application.run_polling(
            poll_interval=0.5,
            timeout=10,
            drop_pending_updates=True,
            allowed_updates=["message", "callback_query"]
        )
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == '__main__':
    main()